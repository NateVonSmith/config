var map_1 = require('./map');
[K1] > (k1);
K1, k2;
K2;
OperatorFunction();
[K1], K3;
keyof;
T[K1][K2] > (k1);
K1, k2;
K2, k3;
K3;
OperatorFunction();
[K1], K3;
keyof;
T[K1][K2], K4;
keyof;
T[K1][K2][K3] > (k1);
K1, k2;
K2, k3;
K3, k4;
K4;
OperatorFunction();
[K1], K3;
keyof;
T[K1][K2], K4;
keyof;
T[K1][K2][K3], K5;
keyof;
T[K1][K2][K3][K4] > (k1);
K1, k2;
K2, k3;
K3, k4;
K4, k5;
K5;
OperatorFunction();
[K1], K3;
keyof;
T[K1][K2], K4;
keyof;
T[K1][K2][K3], K5;
keyof;
T[K1][K2][K3][K4], K6;
keyof;
T[K1][K2][K3][K4][K5] > (k1);
K1, k2;
K2, k3;
K3, k4;
K4, k5;
K5, k6;
K6;
OperatorFunction();
/* tslint:enable:max-line-length */
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * ![](pluck.png)
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * ## Example
 * Map every click to the tagName of the clicked target element
 * ```ts
 * import { fromEvent } from 'rxjs';
 * import { pluck } from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const tagNames = clicks.pipe(pluck('target', 'tagName'));
 * tagNames.subscribe(x => console.log(x));
 * ```
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i - 0] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return function (source) { return map_1.map(plucker(properties, length))(source, as, any); };
}
exports.pluck = pluck;
function plucker(props, length) {
    var mapper = function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
